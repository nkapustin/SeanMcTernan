{
  "openapi": "3.0.1",
  "info": {
    "title": "Integration WS API Documentation",
    "version": "2.0",
    "description": "# Introduction \n\nSimpleTexting’s API 2.0 provides programmatic access to SimpleTexting data and functionality. You can build custom features to do things like sync and manage audiences with your database, send MMS and SMS, and more.\n\n# Authentication\n\nSimpleTexting offers Bearer authentication, also known as token authentication. Using the [token generated](https://app2.simpletexting.com/account/api) on the SimpleTexting platform, developers can securely make calls to the SimpleTexting API. Don’t share it in any public areas such as GitHub, client-side code, etc.\n\n<SecurityDefinitions />\n",
    "termsOfService": "https://simpletexting.com/terms/",
    "contact": {
      "name": "SimpleTexting",
      "url": "https://simpletexting.com/contact-us/"
    }
  },
  "servers": [
    {
      "url": "https://app2.simpletexting.com/v2"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "At a minimum, each contact in SimpleTexting must have a phone number. Contacts can also hold additional information including first name, last name, and email address. You can also create custom fields to store data specific to your website or app’s needs."
    },
    {
      "name": "Contacts Batch",
      "description": "An endpoint to assist in batch operations on your contacts. Using these operations, you can update specific contact information, or delete contacts, all using the contacts phone as an id."
    },
    {
      "name": "Contact Lists",
      "description": "The following endpoints allow you to manage your lists. Lists can be used to manage your contacts so the right message is being sent to the right people."
    },
    {
      "name": "Custom Fields",
      "description": "SimpleTexting's Custom Fields feature plays a key role in managing your customer data. Not only does it give you enormous flexibility when it comes to [collecting](https://help.simpletexting.com/using-simpletexting/apps-and-features/collecting-subscriber-data) or [importing](https://help.simpletexting.com/using-simpletexting/lists-and-contacts/importing-contacts) data, it also lets you quickly and easily personalize each message in a [mass text](https://simpletexting.com/mass-texting/) campaign."
    },
    {
      "name": "Media Items",
      "description": "When sending messages via the SimpleTexting platform, you may need to attach various media items. This API allows you to perform various operations needed to manage your media attachments."
    },
    {
      "name": "Messages",
      "description": "Using the SimpleTexting API, you can send messages programmatically from your server depending on the situation. Send to just one, or many contacts. Whatever your needs may be, we've got you covered. \n\nBelow are some endpoints that allow you to get the most out of our message sending features."
    },
    {
      "name": "Webhook report",
      "description": "Use webhooks to communicate between the SimpleTexting platform and your server. Webhooks can be used to forward messages as well as provide info about unsubscribes and message delivery. \n\nSimpleTexting can trigger webhooks for new incoming messages, delivery reports and unsubscribes. Now you can build scripts that interpret and respond to events that occur in your SimpleTexting account!"
    }
  ],
  "paths": {
    "/api/webhooks/{webhookId}": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook",
        "description": "Update an exsisting webhook by its unique id",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Webhook id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success. Webhook was updated"
          },
          "404": {
            "description": "Error. Webhook not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Delete an exsisting webhook by its unique id",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "Webhook id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "204": {
            "description": "Success. Webhook was deleted"
          }
        }
      }
    },
    "/api/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Fetch all contacts",
        "description": "Fetch all contacts from the SimpleTexting system.",
        "operationId": "fetchContacts",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to load",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 1
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "schema": {
              "maximum": 500,
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "example": 50
          },
          {
            "name": "since",
            "in": "query",
            "description": "List contacts updated since a specified date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-03-30T12:47:40.123-05:00"
          },
          {
            "name": "direction",
            "in": "query",
            "description": "Specifies the sort order for results. Results are sorted by 'updated' field",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "example": "desc"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns a page of contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPageView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact",
        "description": "Create a brand new contact, and specifiy the list they should live in.",
        "operationId": "createContact",
        "parameters": [
          {
            "name": "upsert",
            "in": "query",
            "description": "If a contact exists with the phone number in your request body, the contact will be updated with the information within the request when set to true.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "listsReplacement",
            "in": "query",
            "description": "Set to true to remove from the existing list. Set to false to add contact to a new list, while also keeping the contact in the original list.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseID"
                }
              }
            }
          }
        }
      }
    },
    "/api/contacts/{contactIdOrNumber}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Fetch a contact",
        "description": "Fetch a contact via their unique id, or their phone number. The phone number is the preferred parameter for this call.",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "phoneNumberOrContactId",
            "in": "path",
            "description": "Phone number (preferred) or Contact id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3051234567 or 507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Fetched contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact",
        "description": "Update a contact's information via their unique id. Unspecified keys in a request will not be changed in the contact.",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "contactIdOrNumber",
            "in": "path",
            "description": "Contact id in hexadecimal format or phone number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3051234567 / 507f1f77bcf86cd799439011"
          },
          {
            "name": "listsReplacement",
            "in": "query",
            "description": "Set to true to remove from the existing list. Set to false to add contact to a new list, while also keeping the contact in the original list.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          },
          {
            "name": "upsert",
            "in": "query",
            "description": "If a contact exists with the phone number in your path parameters, the contact will be updated with the information within the request when set to true",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleContactUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseID"
                }
              }
            }
          },
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdateResult"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "description": "Delete a contact via their unique id.",
        "operationId": "deleteContact",
        "parameters": [
          {
            "name": "contactIdOrNumber",
            "in": "path",
            "description": "Contact id in hexadecimal format or phone number",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "204": {
            "description": "Success. Contact deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDeleteResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/contact-lists": {
      "get": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "Fetch lists",
        "description": "Fetch all lists from the SimpleTexting system.",
        "operationId": "getLists",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to load",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "schema": {
              "maximum": 500,
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns an array of lists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPageView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "Create list",
        "description": "Create a new list on the SimpleTexting system.",
        "operationId": "createList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/List Dto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. List created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseID"
                }
              }
            }
          }
        }
      }
    },
    "/api/contact-lists/{listId}": {
      "get": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "Get list",
        "description": "Retrieve a list of contacts that you have uploaded to the SimpleTexting system.",
        "operationId": "getList",
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "List id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Fetched list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "Update list",
        "description": "Update the name of an existing list.",
        "operationId": "updateList",
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "List id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/List Dto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success. List updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseID"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact Lists"
        ],
        "summary": "Delete list",
        "description": "Delete an existing list using the list id.",
        "operationId": "deleteList",
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "List id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "204": {
            "description": "Success. List was deleted"
          }
        }
      }
    },
    "/report/incomming": {
      "post": {
        "tags": [
          "Webhook report"
        ],
        "summary": "Incomming/Outgoing message report",
        "description": "Triggers when an outgoing message or incomming message is handeled",
        "operationId": "incommingMessageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncommingMessageReport"
              }
            }
          },
          "required": true
        }
      }
    },
    "/report/delivery": {
      "post": {
        "tags": [
          "Webhook report"
        ],
        "summary": "Delivery/Non delivered message report",
        "description": "Triggers when an outgoing message is reported as delivered or undelivered by the carrier.",
        "operationId": "deliveryMessageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeliveryMessageReport"
              }
            }
          },
          "required": true
        }
      }
    },
    "/report/unsubscribe": {
      "post": {
        "tags": [
          "Webhook report"
        ],
        "summary": "Unsubscribe report",
        "description": "Triggers when client send STOP to your number",
        "operationId": "unsubscribeMessageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsubscribeReport"
              }
            }
          },
          "required": true
        }
      }
    },
    "/api/messages": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Fetch messages",
        "description": "Fetch all messages sent to a specific phone number from a specified line on your account.",
        "operationId": "getMessages",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to load",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "schema": {
              "maximum": 500,
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "example": 50
          },
          {
            "name": "accountPhone",
            "in": "query",
            "description": "Account phone number",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 555888
          },
          {
            "name": "since",
            "in": "query",
            "description": "First sent/received timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2020-03-30T12:47:40.123-05:00"
          },
          {
            "name": "contactPhone",
            "in": "query",
            "description": "Account phone number",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": 8001234567
          },
          {
            "name": "category",
            "in": "query",
            "description": "Category - available only for MT (Mobile Terminating) messages",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "API"
          },
          {
            "name": "directionType",
            "in": "query",
            "description": "MT/MO (Mobile-Terminated / Mobile-Originated)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "MT",
                "MO"
              ]
            },
            "example": "MO"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns page of messages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagePageView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send message",
        "description": "Send either an MMS, or SMS message to a contact. Use this programmatically to send to multiple contacts.",
        "operationId": "createMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Message was created"
          }
        }
      }
    },
    "/api/messages/{messageId}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get message",
        "description": "Retrieve a specific message from the system via its message id.",
        "operationId": "getMessage",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "Message id in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Fetched message information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/api/messages/evaluate": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Evaluate message",
        "description": "Evaluate the body of your message before sending it to your contact(s).",
        "operationId": "evaluateMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluateMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Evaluation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/mediaitems": {
      "get": {
        "tags": [
          "Media Items"
        ],
        "summary": "Fetch media items",
        "description": "Retrieve items that you have previously uploaded to the SimpleTexting system.",
        "operationId": "getMediaItems",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Number of pages",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "maximum": 500,
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns a page of media items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaItemsPageView"
                }
              }
            }
          }
        }
      }
    },
    "/api/mediaitems/loadByLink": {
      "post": {
        "tags": [
          "Media Items"
        ],
        "summary": "Upload media by link",
        "description": "Upload media via a link. The file can then be sent along with your message to a contact.",
        "operationId": "uploadByLink",
        "parameters": [
          {
            "name": "shared",
            "in": "query",
            "description": "State whether media is shared between teammates",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadByLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Uploaded media",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFile"
                }
              }
            }
          }
        }
      }
    },
    "/api/mediaitems/{mediaItemId}": {
      "delete": {
        "tags": [
          "Media Items"
        ],
        "summary": "Delete media",
        "description": "Remove items that you have previously uploaded to the SimpleTexting system.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "mediaItemId",
            "in": "path",
            "description": "The mediaItemId in hexadecimal format",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "204": {
            "description": "Media is deleted"
          },
          "description": "Success. Media was deleted"
        }
      }
    },
    "/api/mediaitems/upload": {
      "post": {
        "tags": [
          "Media Items"
        ],
        "summary": "Upload media",
        "description": "Upload media directly that can be sent along with your message to a contact.",
        "operationId": "upload",
        "parameters": [
          {
            "name": "shared",
            "in": "query",
            "description": "State whether media is shared between teammates",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "example": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Media file to be uploaded",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success. Uploaded media",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MediaFile"
                }
              }
            }
          }
        }
      }
    },
    "/api/contacts-batch/batch-update": {
      "post": {
        "tags": [
          "Contacts Batch"
        ],
        "summary": "Process contacts batch update",
        "description": "Update multiple fields at once for a batch of contacts. You can update their first name, last name, emails, lists and much more.",
        "operationId": "processBatchUpdate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsBatchUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Contact batch update was processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsBatchUpdateResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/contacts-batch/batch-delete": {
      "post": {
        "tags": [
          "Contacts Batch"
        ],
        "summary": "Process contacts batch delete by contact phone",
        "description": "Delete a group of contacts from the SimpleTexting system using their phone numbers.",
        "operationId": "processBatchDelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactsBatchDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success. Contact batch delete was processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsBatchDeleteResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/custom-fields": {
      "get": {
        "tags": [
          "Custom Fields"
        ],
        "summary": "Fetch custom fields",
        "description": "Fetch all custom fields you've created on the SimpleTexting system.",
        "operationId": "getCustomFields",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to load",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "schema": {
              "maximum": 500,
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns an array of custom fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldPageView"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FetchedWebhook": {
        "type": "object",
        "properties": {
          "url": {
            "description": "URL for handling POST request\n\n**Example:** `https://example.com`",
            "type": "string",
            "example": "https://example.com"
          },
          "triggers": {
            "description": "Trigger a webhook on specific platform events\n\n**Example:** `INCOMING_MESSAGE`",
            "type": "array",
            "example": [
              "INCOMING_MESSAGE"
            ],
            "items": {
              "description": "Trigger a webhook on specific platform events",
              "type": "string",
              "example": "[\"INCOMING_MESSAGE\"]",
              "enum": [
                "INCOMING_MESSAGE",
                "OUTGOING_MESSAGE",
                "DELIVERY_REPORT",
                "NON_DELIVERED_REPORT",
                "UNSUBSCRIBE_REPORT"
              ]
            }
          },
          "requestPerSecLimit": {
            "description": "The maximum number of requests that can be sent within one second\n\n**Example:** `25`",
            "maximum": 25,
            "type": "integer",
            "format": "int32",
            "example": 25
          },
          "tenantPhone": {
            "description": "Optional: requests will come exclusively for the specified tenant phone number\n\n**Example:** `8881234567`",
            "type": "string",
            "example": "8881234567"
          },
          "contactPhone": {
            "description": "Optional: requests will come exclusively for the specified contact phone number\n\n**Example:** `3051234567`",
            "type": "string",
            "example": "3051234567"
          }
        }
      },
      "WebhookRequest": {
        "required": [
          "triggers",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "description": "URL for handling POST request\n\n**Example:** `https://example.com`",
            "type": "string",
            "example": "https://example.com"
          },
          "triggers": {
            "description": "Trigger a webhook on specific platform events\n\n**Example:** `INCOMING_MESSAGE`",
            "type": "array",
            "example": [
              "INCOMING_MESSAGE"
            ],
            "items": {
              "description": "Trigger a webhook on specific platform events",
              "type": "string",
              "example": "[\"INCOMING_MESSAGE\"]",
              "enum": [
                "INCOMING_MESSAGE",
                "OUTGOING_MESSAGE",
                "DELIVERY_REPORT",
                "NON_DELIVERED_REPORT",
                "UNSUBSCRIBE_REPORT"
              ]
            }
          },
          "requestPerSecLimit": {
            "description": "The maximum number of requests that can be sent within one second\n\n**Example:** `25`",
            "maximum": 25,
            "type": "integer",
            "format": "int32",
            "example": 25
          },
          "tenantPhone": {
            "description": "Optional: requests will come exclusively for the specified tenant phone number\n\n**Example:** `8881234567`",
            "type": "string",
            "example": "8881234567"
          },
          "contactPhone": {
            "description": "Optional: requests will come exclusively for the specified contact phone number\n\n**Example:** `3051234567`",
            "type": "string",
            "example": "3051234567"
          }
        }
      },
      "Webhook": {
        "description": "Page content, number of elements is restricted by page size",
        "required": [
          "triggers",
          "url"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          },
          "url": {
            "description": "URL for handling POST request",
            "type": "string"
          },
          "triggers": {
            "description": "Trigger webhook on event types",
            "type": "array",
            "items": {
              "description": "Trigger webhook on event types",
              "type": "string",
              "enum": [
                "INCOMING_MESSAGE",
                "OUTGOING_MESSAGE",
                "DELIVERY_REPORT",
                "NON_DELIVERED_REPORT",
                "UNSUBSCRIBE_REPORT"
              ]
            }
          },
          "requestPerSecLimit": {
            "description": "The maximum number of requests that can be sent within one second",
            "type": "integer",
            "format": "int32"
          },
          "tenantPhone": {
            "description": "Optional: requests will come exclusively for the specified tenant phone number",
            "type": "string"
          },
          "contactPhone": {
            "description": "Optional: requests will come exclusively for the specified contact phone number",
            "type": "string"
          }
        }
      },
      "List Dto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "List name containing less than 42 characters\n\n**Example:** `My new list`",
            "type": "string",
            "example": "My First List"
          }
        }
      },
      "MessageRequest": {
        "required": [
          "contactPhone",
          "mode",
          "text"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "description": "Configures how to present your message:\n\n  - **AUTO** - means that SimpleTexting will find more relative type for your message content\n\n  - **SMS_STRICTLY** will send only single sms or return  an error\n\n  - **MMS** will send MMS or fallback SMS if MMS is not enabled by the contacts' carrier\n\n**Example:** `SINGLE_SMS_STRICTLY`",
            "type": "string",
            "example": "MMS_STRICTLY",
            "enum": [
              "AUTO",
              "SINGLE_SMS_STRICTLY",
              "MMS_STRICTLY"
            ]
          },
          "subject": {
            "description": "MMS Subject (available for MMS) \n\n**Example:** `Some message from SimpleTexting`",
            "type": "string",
            "example": "Some message from SimpleTexting"
          },
          "text": {
            "description": "Text Body \n\n**Example:** `Hello! How are you?`",
            "type": "string",
            "example": "Hello! How are you?"
          },
          "contactPhone": {
            "description": "Contact phone \n\n**Example:** `1234567890`",
            "type": "string",
            "example": "1234567890"
          },
          "fallbackText": {
            "description": "Custom fallback text if mms cannot be received. Should contain '[url=%%fallback_link%%]' placeholder that will be replaced with a link to the message \n\n**Example:** `[url=%%fallback_link%%]`",
            "type": "string",
            "example": "[url=%%fallback_link%%]"
          },
          "mediaItems": {
            "description": "List of mms media urls for temporal storing or media items ids \n\n**Example:** `[\"https://txt.so/img.jpg\", \"507f1f77bcf86cd799439011\"]`",
            "type": "array",
            "example": [
              "https://txt.so/img.jpg",
              "507f1f77bcf86cd799439011"
            ]
          }
        }
      },
      "EvaluateMessage": {
        "required": [
          "contactPhone",
          "mode",
          "text"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "description": "Configures how to present your message\n\n**AUTO -** means that SimpleTexting will find more relative type for your message content\n\n**SMS_STRICTLY -** will send only single sms or return  an error\n\n**MMS -** will send MMS or fallback SMS if MMS is not enabled by the contacts' carrier\n\n**Example:** `SINGLE_SMS_STRICTLY`",
            "type": "string",
            "example": "MMS_STRICTLY",
            "enum": [
              "AUTO",
              "SINGLE_SMS_STRICTLY",
              "MMS_STRICTLY"
            ]
          },
          "subject": {
            "description": "MMS Subject (available for MMS) \n\n**Example:** `New In Store`",
            "type": "string",
            "example": "Some message from SimpleTexting"
          },
          "text": {
            "description": "Text Body \n\n**Example:** `Hello! How are you?`",
            "type": "string",
            "example": "Hello! How are you?"
          },
          "fallbackText": {
            "description": "Custom fallback text if mms cannot be received. Should contain '[url=%%fallback_link%%]' placeholder that will be replaced with a link to the message \n\n**Example:** `[url=%%fallback_link%%]`",
            "type": "string",
            "example": "[url=%%fallback_link%%]"
          },
          "mediaItems": {
            "description": "List of mms media urls for temporal storing or media items ids \n\n**Example:** `[\"https://txt.so/img.jpg\", \"507f1f77bcf86cd799439011\"]`",
            "type": "array",
            "example": [
              "https://txt.so/img.jpg",
              "507f1f77bcf86cd799439011"
            ]
          }
        }
      },
      "MessageInfo": {
        "type": "object",
        "properties": {
          "detectedCategory": {
            "description": "Autodetected category of message \n\n**Example:** `SMS`",
            "type": "string",
            "example": "SMS",
            "enum": [
              "SMS",
              "MMS",
              "EXTENDED_SMS"
            ]
          },
          "length": {
            "description": "Message length in chars \n\n**Example:** `134`",
            "type": "integer",
            "format": "int32",
            "example": 134
          },
          "remains": {
            "description": "Remaining characters \n\n**Example:** `23`",
            "type": "integer",
            "format": "int32",
            "example": 23
          },
          "maxLength": {
            "description": "Message max length in chars with current type and encoding n\n**Example:** `300`",
            "type": "integer",
            "format": "int32",
            "example": 300
          },
          "containsUtfChars": {
            "description": "Is UTF encoding used? \n\n**Example:** `false`",
            "type": "boolean",
            "example": false
          },
          "sumOfCredits": {
            "description": "How much credits message will cost \n\n**Example:** `1`",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "warnings": {
            "description": "List of warning messages if present \n\n**Example:** `[\"Text is blank\"]`",
            "type": "array",
            "items": {
              "description": "List of warning messages if present",
              "type": "string",
              "example": "Text is blank"
            }
          },
          "errors": {
            "description": "List of error messages if present  \n\n**Example:** `[\"Invalid phone number\"]`",
            "type": "array",
            "items": {
              "description": "List of error messages if present",
              "type": "string",
              "example": "Invalid phone number"
            }
          }
        }
      },
      "MediaItemsPageView": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Page content, number of elements is restricted by page size",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFile"
            }
          },
          "totalPages": {
            "description": "Total number of pages, which is number of elements divided by page size",
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "description": "Total number of elements",
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Page representation for search/fetch result"
      },
      "MediaFile": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Existing media id in hexadecimal format \n\n**Example:** `607f0558a7c898629dd47d7a`",
            "type": "string",
            "example": "607f0558a7c898629dd47d7a"
          },
          "createdDate": {
            "description": "Created timestamp - ISO format \n\n**Example:** `2021-04-28T23:20:08.489Z`",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-28T23:20:08.489Z"
          },
          "name": {
            "description": "File name \n\n**Example:** `test.jpg`",
            "type": "string",
            "example": "myfile.jpg"
          },
          "gallery": {
            "description": "Gallery \n\n**Example:** `mms`",
            "type": "string",
            "example": "mms"
          },
          "size": {
            "description": "File size \n\n**Example:** `10`",
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "status": {
            "description": "Status of the file \n\n**Example:** `PROCESSED`",
            "type": "string",
            "example": "PROCESSED"
          },
          "link": {
            "description": "Location of file \n\n**Example:** `https://app2.simpletexting.com/content/public-files/607f0558a7c898629dd47d7a`",
            "type": "string",
            "example": "https://app2.simpletexting.com/content/public-files/607f0558a7c898629dd47d7a"
          },
          "contentType": {
            "description": "File media type \n\n**Example:** `image/png`",
            "type": "string",
            "example": "image/png"
          },
          "ext": {
            "description": "File extension \n\n**Example:** `png`",
            "type": "string",
            "example": "png"
          },
          "canDelete": {
            "description": "Ability to delete file \n\n**Example:** `true`",
            "type": "boolean",
            "example": true
          }
        }
      },
      "UploadByLink": {
        "required": [
          "link"
        ],
        "type": "object",
        "properties": {
          "link": {
            "description": "Link to be used for upload \n\n**Example:** `https://img.gazeta.ru/files3/941/10500941/cat-pic905-895x505-29911.jpg`",
            "type": "string",
            "example": "https://img.gazeta.ru/files3/941/10500941/cat-pic905-895x505-29911.jpg"
          }
        },
        "description": "UploadByLink Request"
      },
      "SingleContactUpdate": {
        "type": "object",
        "properties": {
          "contactPhone": {
            "description": "Unique contact phone: This field should be specified if you wish to update the contact’s phone number \n\n**Example:** `1234567890`",
            "type": "string",
            "example": "1234567890"
          },
          "firstName": {
            "description": "Contact first name \n\n**Example:** `John`",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "Contact last name \n\n**Example:** `Doe`",
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "description": "Contact email \n\n**Example:** `john.doe@simpletext.org`",
            "type": "string",
            "example": "john.doe@simpletext.org"
          },
          "birthday": {
            "description": "Birth date in ISO format: yyyy-mm-dd \n\n**Example:** `1985-05-05`",
            "type": "string",
            "example": "1985-05-05"
          },
          "customFields": {
            "description": "Custom fields are key value pairs with custom information, like tags. If a key already exists the value will be replaced, if not a new pair will be added. Unspecified keys in request will not be changed in the contact",
            "type": "object",
            "additionalProperties": {
              "description": "\n\n**Example:** `{\"zipcode\":\"12345\"}`",
              "type": "string",
              "example": "{\"zipcode\":\"12345\"}"
            },
            "example": {
              "zipcode": "12345"
            }
          },
          "comment": {
            "description": "Comment attached to contact \n\n**Example:** `VIP client`",
            "type": "string",
            "example": "VIP client"
          },
          "listIds": {
            "description": "List of contact list id's or names to replace or add \n\n**Example:** `[\"507f191e810c19729de860ea\", \"My First List\"]`",
            "type": "array",
            "example": [
              "507f191e810c19729de860ea",
              "My First List"
            ]
          }
        }
      },
      "ContactUpdate": {
        "required": [
          "contactPhone"
        ],
        "type": "object",
        "properties": {
          "contactPhone": {
            "description": "Unique contact phone\n\n**Example:** `1234567890`",
            "type": "string",
            "example": "1234567890"
          },
          "firstName": {
            "description": "Contact first name \n\n**Example:** `John`",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "Contact last name \n\n**Example:** `Doe`",
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "description": "Contact email \n\n**Example:** `john.doe@simpletext.org`",
            "type": "string",
            "example": "john.doe@simpletext.org"
          },
          "birthday": {
            "description": "Birth date in ISO format: yyyy-mm-dd \n\n**Example:** `1985-05-05`",
            "type": "string",
            "example": "1985-05-05"
          },
          "customFields": {
            "description": "Custom fields are key value pairs with custom information, like tags. If a key already exists the value will be replaced, if not a new pair will be added. Unspecified keys in request will not be changed in the contact",
            "type": "object",
            "additionalProperties": {
              "description": "\n\n**Example:** `{\"zipcode\":\"12345\"}`",
              "type": "string",
              "example": "{\"zipcode\":\"12345\"}"
            },
            "example": {
              "zipcode": "12345"
            }
          },
          "comment": {
            "description": "Comment attached to contact \n\n**Example:** `VIP client`",
            "type": "string",
            "example": "VIP client"
          },
          "listIds": {
            "description": "List of contact list id's or names to replace or add \n\n**Example:** `[\"507f191e810c19729de860ea\", \"My First List\"]`",
            "type": "array",
            "example": [
              "507f191e810c19729de860ea",
              "My First List"
            ]
          }
        }
      },
      "ContactsBatchUpdate": {
        "required": [
          "updates"
        ],
        "type": "object",
        "properties": {
          "listsReplacement": {
            "description": "Set to true to remove from the existing list. Set to false to add contact to a new list, while also keeping the contact in the original list. \n\n**Example:** `true`",
            "type": "boolean",
            "example": true,
            "default": true
          },
          "updates": {
            "description": "List of updates for contacts",
            "maxItems": 500,
            "minItems": 0,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactUpdate"
            }
          }
        },
        "description": "Add new contacts or update existing, based on unique contact phone. One contact per object in the array"
      },
      "ResponseID": {
        "description": "Create Contact Result",
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of item in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          }
        }
      },
      "ContactUpdateResult": {
        "description": "List of update results",
        "type": "object",
        "properties": {
          "done": {
            "description": "If operation was successful \n\n**Example:** `true`",
            "type": "boolean",
            "example": true
          },
          "contactPhone": {
            "description": "Contact phone from update request \n\n**Example:** `1234567890`",
            "type": "string",
            "example": "1234567890"
          },
          "contactId": {
            "description": "Contact id if contact exists \n\n**Example:** `507f1f77bcf86cd799439011`",
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "errorCode": {
            "description": "Operation error code, if operation has failed \n\n**Example:** `CONTACT_CREATE_FAILED`",
            "type": "string",
            "example": "CONTACT_CREATE_FAILED",
            "enum": [
              "CONTACT_CREATE_INTERNAL_ERROR",
              "CONTACT_UPDATE_INTERNAL_ERROR",
              "CONTACT_IMPORT_LIMIT_IS_REACHED",
              "CONTACT_CREATE_FAILED",
              "CONTACT_UPDATE_FAILED"
            ]
          },
          "errorMessage": {
            "description": "Additional error message if operation has failed \n\n**Example:** `Contacts limit is reached`",
            "type": "string",
            "example": "Contacts limit is reached"
          }
        }
      },
      "ContactsBatchUpdateResult": {
        "type": "object",
        "properties": {
          "results": {
            "description": "List of update results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactUpdateResult"
            }
          }
        }
      },
      "ContactsBatchDelete": {
        "required": [
          "contactPhones"
        ],
        "type": "object",
        "properties": {
          "contactPhones": {
            "description": "List of contact phones for deletion \n\n**Example:** `[\"1234567890\",\"1234567891\"]`",
            "maxItems": 500,
            "minItems": 0,
            "type": "array",
            "example": [
              "1234567890"
            ],
            "items": {
              "description": "List of contact phones for deletion",
              "type": "string",
              "example": "[\"1234567890\"]"
            }
          }
        },
        "description": "ContactsBatchDelete"
      },
      "ContactDeleteResult": {
        "description": "List of deletion results",
        "type": "object",
        "properties": {
          "done": {
            "description": "If operation was successful \n\n**Example:** `true`",
            "type": "boolean",
            "example": true
          },
          "contactPhone": {
            "description": "Contact phone from delete request \n\n**Example:** `1234567890`",
            "type": "string",
            "example": "1234567890"
          },
          "contactId": {
            "description": "Contact id if contact was found or null \n\n**Example:** `507f1f77bcf86cd799439011`",
            "type": "string",
            "example": "507f1f77bcf86cd799439011"
          },
          "errorCode": {
            "description": "Operation error code, if operation has failed \n\n**Example:** `UNKNOWN_CONTACT_PHONE`",
            "type": "string",
            "example": "UNKNOWN_CONTACT_PHONE",
            "enum": [
              "UNKNOWN_CONTACT_PHONE",
              "CONTACT_DELETE_INTERNAL_ERROR"
            ]
          },
          "errorMessage": {
            "description": "Additional error message if operation has failed \n\n**Example:** `Contact with provided phone number is missing`",
            "type": "string",
            "example": "Contact with provided phone number is missing"
          }
        }
      },
      "ContactsBatchDeleteResult": {
        "type": "object",
        "properties": {
          "results": {
            "description": "List of deletion results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactDeleteResult"
            }
          }
        }
      },
      "WebhooksPageView": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Page content, number of elements is restricted by page size",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FetchedWebhook"
            }
          },
          "totalPages": {
            "description": "Total number of pages, which is number of elements divided by page size",
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "description": "Total number of elements",
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Page representation for search/fetch result"
      },
      "MessagePageView": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Page content, number of elements is restricted by page size",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "totalPages": {
            "description": "Total number of pages, which is number of elements divided by page size",
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "description": "Total number of elements",
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Page representation for search/fetch result"
      },
      "UnsubscribeReport": {
        "type": "object",
        "properties": {
          "reportId": {
            "description": "Unique report id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "webhookId": {
            "description": "Webhook id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "type": {
            "description": "Webhook report content type",
            "type": "string",
            "example": "UNSUBSCRIBE_REPORT",
            "enum": [
              "INCOMING_MESSAGE",
              "OUTGOING_MESSAGE",
              "DELIVERY_REPORT",
              "NON_DELIVERED_REPORT",
              "UNSUBSCRIBE_REPORT"
            ]
          },
          "values": {
            "description": "report content",
            "type": "object",
            "properties": {
              "contactId": {
                "description": "Contact id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
                "type": "string",
                "example": "507f191e810c19729de860ea"
              },
              "phone": {
                "description": "Contact phone \n\n**Example:** `8001234567`",
                "type": "string",
                "example": "8001234567"
              }
            }
          }
        }
      },
      "DeliveryMessageReport": {
        "type": "object",
        "properties": {
          "reportId": {
            "description": "Unique report id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "webhookId": {
            "description": "Webhook id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "type": {
            "description": "Webhook report content type",
            "type": "string",
            "example": "DELIVERY_REPORT",
            "enum": [
              "INCOMING_MESSAGE",
              "OUTGOING_MESSAGE",
              "DELIVERY_REPORT",
              "NON_DELIVERED_REPORT",
              "UNSUBSCRIBE_REPORT"
            ]
          },
          "values": {
            "description": "report content",
            "type": "object",
            "properties": {
              "messageId": {
                "description": "Message id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
                "type": "string",
                "example": "507f191e810c19729de860ea"
              },
              "category": {
                "description": "Message category \n\n**Example:** `SMS`",
                "type": "string",
                "example": "SMS",
                "enum": [
                  "SMS",
                  "MMS",
                  "EXTENDED_SMS"
                ]
              },
              "type": {
                "description": "Reference type (available only for MT messages) \n\n**Example:** `API`",
                "type": "string",
                "example": "API"
              },
              "tenantPhone": {
                "description": "Account phone (primary or secondary) \n\n**Example:** `555888`",
                "type": "string",
                "example": "555888"
              },
              "contactPhone": {
                "description": "Contact phone \n\n**Example:** `8001234567`",
                "type": "string",
                "example": "8001234567"
              },
              "carrier": {
                "description": "Name of carrier \n\n**Example:** `Verizon`",
                "type": "string",
                "example": "Verizon"
              }
            }
          }
        }
      },
      "IncommingMessageReport": {
        "type": "object",
        "properties": {
          "reportId": {
            "description": "Unique report id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "webhookId": {
            "description": "Webhook id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "type": {
            "description": "Webhook report content type",
            "type": "string",
            "example": "INCOMING_MESSAGE",
            "enum": [
              "INCOMING_MESSAGE",
              "OUTGOING_MESSAGE",
              "DELIVERY_REPORT",
              "NON_DELIVERED_REPORT",
              "UNSUBSCRIBE_REPORT"
            ]
          },
          "values": {
            "description": "report content",
            "type": "object",
            "properties": {
              "messageId": {
                "description": "Message id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
                "type": "string",
                "example": "507f191e810c19729de860ea"
              },
              "subject": {
                "description": "Subject (available for MMS) \n\n**Example:** `Some message from SimpleTexting`",
                "type": "string",
                "example": "Some message from SimpleTexting"
              },
              "mediaItems": {
                "description": "List of mms media descriptors: id in hexadecimal format for st-stored file \n\n**Example:** `[\"507f1f77bcf86cd799439011\",\"507f1f77bcf86cd799439333\"]`",
                "type": "array",
                "example": [
                  "507f1f77bcf86cd799439011",
                  "507f1f77bcf86cd799439333"
                ],
                "items": {
                  "description": "List of mms media descriptors: id in hexadecimal format for st-stored file",
                  "type": "string",
                  "example": "[\"507f1f77bcf86cd799439011\",\"507f1f77bcf86cd799439333\"]"
                }
              },
              "text": {
                "description": "Text \n\n**Example:** `Hello! How are you?`",
                "type": "string",
                "example": "Hello! How are you?"
              },
              "tenantPhone": {
                "description": "Account phone (primary or secondary) \n\n**Example:** `555888`",
                "type": "string",
                "example": "555888"
              },
              "contactPhone": {
                "description": "Contact phone \n\n**Example:** `8001234567`",
                "type": "string",
                "example": "8001234567"
              },
              "timestamp": {
                "description": "Date of sending - ISO Format \n\n**Example:** `2020-04-28T23:20:08.489Z`",
                "type": "string",
                "format": "date-time",
                "example": "2020-04-28T23:20:08.489Z"
              },
              "category": {
                "description": "Message category \n\n**Example:** `SMS`",
                "type": "string",
                "example": "SMS",
                "enum": [
                  "SMS",
                  "MMS",
                  "EXTENDED_SMS"
                ]
              },
              "type": {
                "description": "Reference type (available only for MT messages) \n\n**Example:** `API`",
                "type": "string",
                "example": "API"
              }
            }
          }
        }
      },
      "Message": {
        "description": "Page content, number of elements is restricted by page size",
        "type": "object",
        "properties": {
          "id": {
            "description": "Message id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "subject": {
            "description": "Subject (available for MMS) \n\n**Example:** `Some message from SimpleTexting`",
            "type": "string",
            "example": "Some message from SimpleTexting"
          },
          "text": {
            "description": "Text \n\n**Example:** `Hello! How are you?`",
            "type": "string",
            "example": "Hello! How are you?"
          },
          "contactPhone": {
            "description": "Contact phone \n\n**Example:** `8001234567`",
            "type": "string",
            "example": "8001234567"
          },
          "accountPhone": {
            "description": "Account phone (primary or secondary) \n\n**Example:** `555888`",
            "type": "string",
            "example": "555888"
          },
          "directionType": {
            "description": "MT/MO (Mobile-Terminated / Mobile-Originated)\n\n**Example:** `MO`",
            "type": "string",
            "example": "MO",
            "enum": [
              "MT",
              "MO"
            ]
          },
          "timestamp": {
            "description": "Date of sending - ISO Format \n\n**Example:** `2020-04-28T23:20:08.489Z`",
            "type": "string",
            "format": "date-time",
            "example": "2020-04-28T23:20:08.489Z"
          },
          "referenceType": {
            "description": "Reference type (available only for MT messages) \n\n**Example:** `API`",
            "type": "string",
            "example": "API"
          },
          "category": {
            "description": "Message category \n\n**Example:** `SMS`",
            "type": "string",
            "example": "SMS",
            "enum": [
              "SMS",
              "MMS",
              "EXTENDED_SMS"
            ]
          },
          "mediaItems": {
            "description": "List of mms media descriptors: id in hexadecimal format for st-stored file \n\n**Example:** `[\"507f1f77bcf86cd799439011\",\"507f1f77bcf86cd799439333\"]`",
            "type": "array",
            "example": [
              "507f1f77bcf86cd799439011",
              "507f1f77bcf86cd799439333"
            ],
            "items": {
              "description": "List of mms media descriptors: id in hexadecimal format for st-stored file",
              "type": "string",
              "example": "[\"507f1f77bcf86cd799439011\",\"507f1f77bcf86cd799439333\"]"
            }
          }
        }
      },
      "ContactPageView": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Page content, number of elements is restricted by page size",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            }
          },
          "totalPages": {
            "description": "Total number of pages, which is number of elements divided by page size",
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "description": "Total number of elements",
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Page representation for search/fetch result"
      },
      "CustomFieldPageView": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Page content, number of elements is restricted by page size",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "totalPages": {
            "description": "Total number of pages, which is number of elements divided by page size",
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "description": "Total number of elements",
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Page representation for search/fetch result"
      },
      "CustomField": {
        "description": "Custom fields are key value pairs with custom information, like tags. If a key already exists the value will be replaced, if not a new pair will be added. Unspecified keys in request will not be changed in the contact",
        "type": "object",
        "properties": {
          "label": {
            "description": "Label Given to Custom Field Type \n\n**Example:** `My Custom Field`",
            "type": "string",
            "example": "My Custom Field"
          },
          "type": {
            "description": "Custom Field Type \n\n**Example:** `text`",
            "type": "string",
            "example": "text"
          },
          "mergeTag": {
            "description": "Merge tag to be added to message \n\n**Example:** `my_custom_field`",
            "type": "string",
            "example": "my_custom_field"
          },
          "defaultMaxLength": {
            "description": "Max length of the custom field \n\n**Example:** `15`",
            "type": "integer",
            "format": "int32",
            "example": 15
          }
        }
      },
      "Contact": {
        "description": "Page content, number of elements is restricted by page size",
        "type": "object",
        "properties": {
          "contactId": {
            "description": "Existing contact id in hexadecimal format \n\n**Example:** `607f0558a7c898629dd47d7a`",
            "type": "string",
            "example": "607f0558a7c898629dd47d7a"
          },
          "contactPhone": {
            "description": "Unique contact phone \n\n**Example:** `1234567890`",
            "type": "string",
            "example": "1234567890"
          },
          "firstName": {
            "description": "Contact first name \n\n**Example:** `John`",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "Contact last name \n\n**Example:** `Doe`",
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "description": "Contact email \n\n**Example:** `john.doe@simpletext.org`",
            "type": "string",
            "example": "john.doe@simpletext.org"
          },
          "birthday": {
            "description": "Birth date in ISO format: yyyy-mm-dd \n\n**Example:** `1985-05-05`",
            "type": "string",
            "example": "1985-05-05"
          },
          "customFields": {
            "description": "Custom fields are key value pairs with custom information, like tags. If a key already exists the value will be replaced, if not a new pair will be added. Unspecified keys in request will not be changed in the contact",
            "type": "object",
            "additionalProperties": {
              "description": "\n\n**Example:** `{\"zipcode\":\"12345\"}`",
              "type": "string",
              "example": "{\"zipcode\":\"12345\"}"
            },
            "example": {
              "zipcode": "12345"
            }
          },
          "comment": {
            "description": "Comment attached to contact \n\n**Example:** `VIP client`",
            "type": "string",
            "example": "VIP client"
          },
          "lists": {
            "description": "List of lists, where contact is included",
            "type": "array",
            "example": [
              {
                "id": "5f6c760379f4e93135aac72b",
                "name": "My First List"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Contact list"
            }
          },
          "subscriptionStatus": {
            "description": "Contact subscription status \n\n**Example:** `OPT_IN`",
            "type": "string",
            "example": "OPT_IN",
            "enum": [
              "OPT_IN",
              "OPT_OUT",
              "WAIT_SMS_CONFIRMATION",
              "REJECT_CONFIRMATION"
            ]
          },
          "created": {
            "description": "Created timestamp - ISO format \n\n**Example:** `2021-04-28T23:20:08.489Z`",
            "type": "string",
            "format": "date-time",
            "example": "2021-04-28T23:20:08.489Z"
          },
          "updated": {
            "description": "Updated timestamp - ISO format \n\n**Example:** `2021-04-28T23:20:08.489Z`",
            "type": "string",
            "format": "date-time",
            "example": "2021-05-28T20:20:08.489Z"
          },
          "updateSource": {
            "description": "The source from which the contact was updated \n\n**Example:** `IMPORTED_FROM_FILE`",
            "type": "string",
            "enum": [
              "IMPORTED_FROM_FILE",
              "PUBLIC_API",
              "MAILCHIMP_SYNC",
              "KEYWORD",
              "WEB_FORM",
              "MANUAL",
              "REMINDER",
              "ZAPIER",
              "WORKATO",
              "CONFIRMATION",
              "INCOMING_MESSAGE"
            ],
            "example": "IMPORTED_FROM_FILE"
          }
        }
      },
      "Contact list": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Existing list id",
            "type": "string",
            "example": "5f6c760379f4e93135aac72a"
          },
          "name": {
            "description": "Existing list name",
            "type": "string",
            "example": "My First List"
          }
        },
        "example": [
          {
            "id": "5f6c760379f4e93135aac72b",
            "name": "My First List"
          }
        ]
      },
      "ListPageView": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Page content, number of elements is restricted by page size",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/List"
            }
          },
          "totalPages": {
            "description": "Total number of pages, which is number of elements divided by page size",
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "description": "Total number of elements",
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Page representation for search/fetch result"
      },
      "List": {
        "description": "Page content, number of elements is restricted by page size",
        "type": "object",
        "properties": {
          "listId": {
            "description": "List id in hexadecimal format \n\n**Example:** `507f191e810c19729de860ea`",
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "name": {
            "description": "List name \n\n**Example:** `My First List`",
            "type": "string",
            "example": "My First List"
          },
          "created": {
            "description": "Created timestamp \n\n**Example:** `2020-03-30T12:47:40.123-05:00`",
            "type": "string",
            "format": "date-time",
            "example": "2020-03-30T12:47:40.123-05:00"
          },
          "updated": {
            "description": "Updated timestamp \n\n**Example:** `2020-03-30T12:47:40.123-05:00`",
            "type": "string",
            "format": "date-time",
            "example": "2020-03-30T12:47:40.123-05:00"
          },
          "description": {
            "description": "Description. Title is present when list is created automatically by a keyword via the dashboard, otherwise defaults to null \n\n**Example:** `List for 'MYFIRSTKEYWORD' keyword`",
            "type": "string",
            "example": "List for 'SALE' keyword"
          },
          "totalContactsCount": {
            "description": "Total contacts count \n\n**Example:** `50`",
            "type": "integer",
            "format": "int32",
            "example": 50
          },
          "activeContactsCount": {
            "description": "Active contacts count  \n\n**Example:** `40`",
            "type": "integer",
            "format": "int32",
            "example": 40
          },
          "invalidContactsCount": {
            "description": "Invalid contacts count \n\n**Example:** `1`",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "unsubscribedContactsCount": {
            "description": "Unsubscribed contacts count  \n\n**Example:** `2`",
            "type": "integer",
            "format": "int32",
            "example": 2
          },
          "keywords": {
            "description": "Keywords that bound to the list  \n\n**Example:** `[\"SALE\",\"MYFIRSTKEYWORD\"]`",
            "type": "array",
            "items": {
              "description": "Keywords that bound to the list",
              "type": "string",
              "example": "MYFIRSTKEYWORD"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Each time you make a request to our API, we use a bearer token in your header to authenticate your account. API requests without authentication will fail. Your API token can be found under [settings](https://app2.simpletexting.com/account/api).<br><br>Please be sure to keep your bearer token secure. Don’t share it any public areas such as GitHub, client-side code, etc.",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}
